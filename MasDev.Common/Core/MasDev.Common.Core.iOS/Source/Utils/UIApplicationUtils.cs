using System;
using UIKit;
using Foundation;
using System.Linq;

namespace MasDev.iOS.Utils
{
	public static class UIApplicationUtils
	{
		private static string libraryFolderPath;

		// Lirabry is a good place to store files not directly generated by the user
		public static string LibraryFolderPath
		{
			get 
			{
				if (string.IsNullOrEmpty (libraryFolderPath))
				{
					string docFolder = string.Empty;
					if (UIDevice.CurrentDevice.CheckSystemVersion(8, 0))
						docFolder = NSFileManager.DefaultManager.GetUrls(NSSearchPathDirectory.DocumentDirectory, NSSearchPathDomain.User) [0].Path;
					else
						docFolder = Environment.GetFolderPath(Environment.SpecialFolder.Personal); // Documents folder

					libraryFolderPath = System.IO.Path.Combine(docFolder, "..", "Library"); // Library folder instead 
				}

				return libraryFolderPath;
			}
		}

		public static bool DeviceIsTablet {
			get { return UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Pad; }
		}

		public static void DisableScreenLock(bool disabled)
		{
			UIApplication.SharedApplication.IdleTimerDisabled = disabled;
		}

		public static UIStoryboard StoryBoard
		{
			get
			{
				return UIApplication.SharedApplication.KeyWindow.RootViewController.Storyboard;
			}
		}

		static UIViewController TopViewController (UIViewController rootViewController)
		{
			if (rootViewController == null || rootViewController.PresentedViewController == null)
				return rootViewController;

			var navController = rootViewController.PresentedViewController as UINavigationController;
			if(navController != null)
				return TopViewController(navController.ViewControllers.LastOrDefault ());

			return TopViewController (rootViewController.PresentedViewController);
		}

		public static UIView TopMostView
		{
			get
			{
				return UIApplication.SharedApplication.KeyWindow.RootViewController.View;
			}
		}

		public static void OpenUrl(NSUrlUtils.ActionEnum action, string value)
		{
			if (string.IsNullOrWhiteSpace (value))
				return;

			if (action == NSUrlUtils.ActionEnum.WEB)
				value = value.Replace ("https://", "").Replace ("http://", "");

			var currValue = value.Replace (" ", "+");
			var actionString = NSUrlUtils.UrlFromAction (action);
			UIApplicationUtils.OpenUrl(String.Format ("{0}{1}", actionString, currValue));
		}

		public static void OpenUrl(string urlString)
		{
			var url = NSUrl.FromString(urlString);

			if(UIApplication.SharedApplication.CanOpenUrl (url))
				UIApplication.SharedApplication.OpenUrl (url);
		}

		public static void ShowNetworkActivityIndicator(bool visible = true)
		{
			UIApplication.SharedApplication.NetworkActivityIndicatorVisible = visible;
		}

		public static int ApplicationIconBadgeNumber
		{
			get
			{
				return (int) UIApplication.SharedApplication.ApplicationIconBadgeNumber;
			}
			set
			{
				UIApplication.SharedApplication.ApplicationIconBadgeNumber = value;
			}
		}

		public static void UpdateApplicationIconBadgeNumber(int badgeNumber)
		{
			if (badgeNumber < 0)
				return;
			
			ApplicationIconBadgeNumber = badgeNumber;
		}

		public static void ClearApplicationIconBadgeNumber()
		{
			UpdateApplicationIconBadgeNumber(0);
		}
	}
}